
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002a10  00002aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800170  00800170  00002bb4  2**0
                  ALLOC
  3 .stab         00002064  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ecd  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00005eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000084cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009999  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000aca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 13 	call	0x27aa	; 0x27aa <main>
      8a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e6       	ldi	r22, 0x67	; 103
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e1 59       	subi	r30, 0x91	; 145
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <MEXTI_Callback>:


void (*Global_Pointer)(void)=NULL;

void MEXTI_Callback(void(*Loc_PtrToFunc)(void))
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <MEXTI_Callback+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_PtrToFunc!=NULL)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	31 f0       	breq	.+12     	; 0xf0c <MEXTI_Callback+0x22>
	{
		Global_Pointer=Loc_PtrToFunc;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	90 93 71 01 	sts	0x0171, r25
     f08:	80 93 70 01 	sts	0x0170, r24
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <__vector_1>:

// ISR for INT0 ==> 1-1 = 0 from table
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	if (Global_Pointer!=NULL)
     f40:	80 91 70 01 	lds	r24, 0x0170
     f44:	90 91 71 01 	lds	r25, 0x0171
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	29 f0       	breq	.+10     	; 0xf56 <__vector_1+0x40>
	{
		Global_Pointer();
     f4c:	e0 91 70 01 	lds	r30, 0x0170
     f50:	f0 91 71 01 	lds	r31, 0x0171
     f54:	09 95       	icall
	}
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <MEXTI0_Init>:
/*
 * 1- Set Sense Control
 * 2- Enable PIE
 */
void MEXTI0_Init()
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	// Selective macros defines Prebuild configuration , conditional compilation
#if MEXTI_SENSE_CONTROL_STATE == MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,0);
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8e 7f       	andi	r24, 0xFE	; 254
     f90:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     f92:	a5 e5       	ldi	r26, 0x55	; 85
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e5       	ldi	r30, 0x55	; 85
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8d 7f       	andi	r24, 0xFD	; 253
     f9e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,1);
#endif

	/*Enable Interrupt On INT0 ==> PIE of interrupt Zero */
	SET_BIT(GICR,6);
     fa0:	ab e5       	ldi	r26, 0x5B	; 91
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	eb e5       	ldi	r30, 0x5B	; 91
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 64       	ori	r24, 0x40	; 64
     fac:	8c 93       	st	X, r24
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <MEXTI1_Init>:
void MEXTI1_Init()
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	// Selective macros defines Prebuild configuration , conditional compilation
#if MEXTI_SENSE_CONTROL_STATE == MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,2);
     fbc:	a5 e5       	ldi	r26, 0x55	; 85
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e5       	ldi	r30, 0x55	; 85
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	8c 93       	st	X, r24
#elif EXTI_SENSE_CONTROL_STATE == MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#endif

}
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <MEXTI2_Init>:
void MEXTI2_Init()
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62


}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <MEXTI_SetSenseControl>:

void MEXTI_SetSenseControl(u8 Copy_u8Interrupt_ID, u8 Copy_u8mode)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <MEXTI_SetSenseControl+0x6>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	6a 83       	std	Y+2, r22	; 0x02

}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MDIO_SetPortDirection>:
#include "../../LIB/BIT_MATH.h"
#include "MDIO_Interface.h"
#include "MDIO_Private.h"

void MDIO_SetPortDirection(u8 Copy_u8PortNo , u8 Copy_u8PortDir )
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <MDIO_SetPortDirection+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <MDIO_SetPortDirection+0x8>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PortDir==PORT_OUTPUT) || (Copy_u8PortDir == PORT_INPUT))
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	8f 3f       	cpi	r24, 0xFF	; 255
    1018:	19 f0       	breq	.+6      	; 0x1020 <MDIO_SetPortDirection+0x1c>
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	88 23       	and	r24, r24
    101e:	91 f5       	brne	.+100    	; 0x1084 <MDIO_SetPortDirection+0x80>
	{ /*Valid port direction given*/
		switch (Copy_u8PortNo)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3c 83       	std	Y+4, r19	; 0x04
    1028:	2b 83       	std	Y+3, r18	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	d1 f0       	breq	.+52     	; 0x1068 <MDIO_SetPortDirection+0x64>
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
    1036:	3c 81       	ldd	r19, Y+4	; 0x04
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <MDIO_SetPortDirection+0x44>
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f0       	breq	.+24     	; 0x105e <MDIO_SetPortDirection+0x5a>
    1046:	1e c0       	rjmp	.+60     	; 0x1084 <MDIO_SetPortDirection+0x80>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <MDIO_SetPortDirection+0x6e>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	81 f0       	breq	.+32     	; 0x107c <MDIO_SetPortDirection+0x78>
    105c:	13 c0       	rjmp	.+38     	; 0x1084 <MDIO_SetPortDirection+0x80>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDir;
    105e:	ea e3       	ldi	r30, 0x3A	; 58
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
    1066:	0e c0       	rjmp	.+28     	; 0x1084 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDir;
    1068:	e7 e3       	ldi	r30, 0x37	; 55
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	80 83       	st	Z, r24
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDir;
    1072:	e4 e3       	ldi	r30, 0x34	; 52
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDir;
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
	}
	else
	{
		/*Valid port direction given*/
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <MDIO_SetPinDirection>:
void MDIO_SetPinDirection(u8 Copy_u8PinNo , u8 Copy_u8PortNo , u8 Copy_u8PinDir )
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <MDIO_SetPinDirection+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <MDIO_SetPinDirection+0x8>
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6a 83       	std	Y+2, r22	; 0x02
    10a4:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <MDIO_SetPinDirection+0x1c>
    10ac:	e0 c0       	rjmp	.+448    	; 0x126e <MDIO_SetPinDirection+0x1dc>
	{
		switch (Copy_u8PortNo)
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3d 83       	std	Y+5, r19	; 0x05
    10b6:	2c 83       	std	Y+4, r18	; 0x04
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <MDIO_SetPinDirection+0x32>
    10c2:	47 c0       	rjmp	.+142    	; 0x1152 <MDIO_SetPinDirection+0xc0>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <MDIO_SetPinDirection+0x46>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <MDIO_SetPinDirection+0x60>
    10d6:	cb c0       	rjmp	.+406    	; 0x126e <MDIO_SetPinDirection+0x1dc>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <MDIO_SetPinDirection+0x52>
    10e2:	67 c0       	rjmp	.+206    	; 0x11b2 <MDIO_SetPinDirection+0x120>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <MDIO_SetPinDirection+0x5e>
    10ee:	91 c0       	rjmp	.+290    	; 0x1212 <MDIO_SetPinDirection+0x180>
    10f0:	be c0       	rjmp	.+380    	; 0x126e <MDIO_SetPinDirection+0x1dc>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDir==PIN_OUTPUT)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <MDIO_SetPinDirection+0x8e>
			{
				SET_BIT(DDRA,Copy_u8PinNo);
    10f8:	aa e3       	ldi	r26, 0x3A	; 58
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <MDIO_SetPinDirection+0x84>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <MDIO_SetPinDirection+0x80>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	a7 c0       	rjmp	.+334    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 23       	and	r24, r24
    1124:	09 f0       	breq	.+2      	; 0x1128 <MDIO_SetPinDirection+0x96>
    1126:	a3 c0       	rjmp	.+326    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRA,Copy_u8PinNo);
    1128:	aa e3       	ldi	r26, 0x3A	; 58
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ea e3       	ldi	r30, 0x3A	; 58
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <MDIO_SetPinDirection+0xb4>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <MDIO_SetPinDirection+0xb0>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	8e c0       	rjmp	.+284    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDir==PIN_OUTPUT)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <MDIO_SetPinDirection+0xee>
			{
				SET_BIT(DDRB,Copy_u8PinNo);
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_SetPinDirection+0xe4>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_SetPinDirection+0xe0>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	77 c0       	rjmp	.+238    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 23       	and	r24, r24
    1184:	09 f0       	breq	.+2      	; 0x1188 <MDIO_SetPinDirection+0xf6>
    1186:	73 c0       	rjmp	.+230    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRB,Copy_u8PinNo);
    1188:	a7 e3       	ldi	r26, 0x37	; 55
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <MDIO_SetPinDirection+0x114>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <MDIO_SetPinDirection+0x110>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	5e c0       	rjmp	.+188    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDir==PIN_OUTPUT)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a1 f4       	brne	.+40     	; 0x11e0 <MDIO_SetPinDirection+0x14e>
			{
				SET_BIT(DDRC,Copy_u8PinNo);
    11b8:	a4 e3       	ldi	r26, 0x34	; 52
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <MDIO_SetPinDirection+0x144>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <MDIO_SetPinDirection+0x140>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	47 c0       	rjmp	.+142    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 23       	and	r24, r24
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <MDIO_SetPinDirection+0x156>
    11e6:	43 c0       	rjmp	.+134    	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRC,Copy_u8PinNo);
    11e8:	a4 e3       	ldi	r26, 0x34	; 52
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e4 e3       	ldi	r30, 0x34	; 52
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_SetPinDirection+0x174>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_SetPinDirection+0x170>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	2e c0       	rjmp	.+92     	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDir==PIN_OUTPUT)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	a1 f4       	brne	.+40     	; 0x1240 <MDIO_SetPinDirection+0x1ae>
			{
				SET_BIT(DDRD,Copy_u8PinNo);
    1218:	a1 e3       	ldi	r26, 0x31	; 49
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <MDIO_SetPinDirection+0x1a4>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <MDIO_SetPinDirection+0x1a0>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	17 c0       	rjmp	.+46     	; 0x126e <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 23       	and	r24, r24
    1244:	a1 f4       	brne	.+40     	; 0x126e <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRD,Copy_u8PinNo);
    1246:	a1 e3       	ldi	r26, 0x31	; 49
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e1 e3       	ldi	r30, 0x31	; 49
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <MDIO_SetPinDirection+0x1d2>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <MDIO_SetPinDirection+0x1ce>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <MDIO_SetPortValue>:
void MDIO_SetPortValue(u8 Copy_u8PortNo,u8 Copy_u8PortValue)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <MDIO_SetPortValue+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <MDIO_SetPortValue+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortValue==PORT_HIGH)||(Copy_u8PortValue==PORT_LOW))
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	19 f0       	breq	.+6      	; 0x129a <MDIO_SetPortValue+0x1c>
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 23       	and	r24, r24
    1298:	91 f5       	brne	.+100    	; 0x12fe <MDIO_SetPortValue+0x80>
	{
		switch (Copy_u8PortNo)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	2b 83       	std	Y+3, r18	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	d1 f0       	breq	.+52     	; 0x12e2 <MDIO_SetPortValue+0x64>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <MDIO_SetPortValue+0x44>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 f0       	breq	.+24     	; 0x12d8 <MDIO_SetPortValue+0x5a>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <MDIO_SetPortValue+0x80>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <MDIO_SetPortValue+0x6e>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <MDIO_SetPortValue+0x78>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <MDIO_SetPortValue+0x80>
		{
		/*Valid port direction given */
		case MDIO_PORTA:
			PORTA = Copy_u8PortValue;
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTB:
			PORTB = Copy_u8PortValue;
    12e2:	e8 e3       	ldi	r30, 0x38	; 56
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTC:
			PORTC = Copy_u8PortValue;
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTD:
			PORTC = Copy_u8PortValue;
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid port value given*/
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <MDIO_SetPinValue>:
void MDIO_SetPinValue(u8 Copy_u8PinNo , u8 Copy_u8PortNo , u8 Copy_u8Pinvalue)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <MDIO_SetPinValue+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <MDIO_SetPinValue+0x8>
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6a 83       	std	Y+2, r22	; 0x02
    131e:	4b 83       	std	Y+3, r20	; 0x03

	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	88 30       	cpi	r24, 0x08	; 8
    1324:	08 f0       	brcs	.+2      	; 0x1328 <MDIO_SetPinValue+0x1c>
    1326:	e0 c0       	rjmp	.+448    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
	{
		switch (Copy_u8PortNo)
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3d 83       	std	Y+5, r19	; 0x05
    1330:	2c 83       	std	Y+4, r18	; 0x04
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <MDIO_SetPinValue+0x32>
    133c:	47 c0       	rjmp	.+142    	; 0x13cc <MDIO_SetPinValue+0xc0>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <MDIO_SetPinValue+0x46>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	71 f0       	breq	.+28     	; 0x136c <MDIO_SetPinValue+0x60>
    1350:	cb c0       	rjmp	.+406    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
    1352:	2c 81       	ldd	r18, Y+4	; 0x04
    1354:	3d 81       	ldd	r19, Y+5	; 0x05
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <MDIO_SetPinValue+0x52>
    135c:	67 c0       	rjmp	.+206    	; 0x142c <MDIO_SetPinValue+0x120>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <MDIO_SetPinValue+0x5e>
    1368:	91 c0       	rjmp	.+290    	; 0x148c <MDIO_SetPinValue+0x180>
    136a:	be c0       	rjmp	.+380    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
		{
		case MDIO_PORTA:
			if (Copy_u8Pinvalue==PIN_HIGH)
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	a1 f4       	brne	.+40     	; 0x139a <MDIO_SetPinValue+0x8e>
			{
				SET_BIT(PORTA,Copy_u8PinNo);
    1372:	ab e3       	ldi	r26, 0x3B	; 59
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	eb e3       	ldi	r30, 0x3B	; 59
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <MDIO_SetPinValue+0x84>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <MDIO_SetPinValue+0x80>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	a7 c0       	rjmp	.+334    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <MDIO_SetPinValue+0x96>
    13a0:	a3 c0       	rjmp	.+326    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTA,Copy_u8PinNo);
    13a2:	ab e3       	ldi	r26, 0x3B	; 59
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <MDIO_SetPinValue+0xb4>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <MDIO_SetPinValue+0xb0>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	8e c0       	rjmp	.+284    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8Pinvalue==PIN_HIGH)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	a1 f4       	brne	.+40     	; 0x13fa <MDIO_SetPinValue+0xee>
			{
				SET_BIT(PORTB,Copy_u8PinNo);
    13d2:	a8 e3       	ldi	r26, 0x38	; 56
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e3       	ldi	r30, 0x38	; 56
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_SetPinValue+0xe4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_SetPinValue+0xe0>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	77 c0       	rjmp	.+238    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 23       	and	r24, r24
    13fe:	09 f0       	breq	.+2      	; 0x1402 <MDIO_SetPinValue+0xf6>
    1400:	73 c0       	rjmp	.+230    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTB,Copy_u8PinNo);
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <MDIO_SetPinValue+0x114>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <MDIO_SetPinValue+0x110>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	5e c0       	rjmp	.+188    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8Pinvalue==PIN_HIGH)
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	a1 f4       	brne	.+40     	; 0x145a <MDIO_SetPinValue+0x14e>
			{
				SET_BIT(PORTC,Copy_u8PinNo);
    1432:	a5 e3       	ldi	r26, 0x35	; 53
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e3       	ldi	r30, 0x35	; 53
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <MDIO_SetPinValue+0x144>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <MDIO_SetPinValue+0x140>
    1454:	84 2b       	or	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	47 c0       	rjmp	.+142    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 23       	and	r24, r24
    145e:	09 f0       	breq	.+2      	; 0x1462 <MDIO_SetPinValue+0x156>
    1460:	43 c0       	rjmp	.+134    	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTC,Copy_u8PinNo);
    1462:	a5 e3       	ldi	r26, 0x35	; 53
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <MDIO_SetPinValue+0x174>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <MDIO_SetPinValue+0x170>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	2e c0       	rjmp	.+92     	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8Pinvalue==PIN_HIGH)
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	a1 f4       	brne	.+40     	; 0x14ba <MDIO_SetPinValue+0x1ae>
			{
				SET_BIT(PORTD,Copy_u8PinNo);
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <MDIO_SetPinValue+0x1a4>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <MDIO_SetPinValue+0x1a0>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 23       	and	r24, r24
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTD,Copy_u8PinNo);
    14c0:	a2 e3       	ldi	r26, 0x32	; 50
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <MDIO_SetPinValue+0x1d2>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <MDIO_SetPinValue+0x1ce>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <MDIO_ReadPort>:
void MDIO_ReadPort(u8 Copy_u8PortNo, u8* P_u8PortReading)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <MDIO_ReadPort+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <MDIO_ReadPort+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	7b 83       	std	Y+3, r23	; 0x03
    150a:	6a 83       	std	Y+2, r22	; 0x02
	if (P_u8PortReading!=NULL)
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	d1 f1       	breq	.+116    	; 0x1588 <MDIO_ReadPort+0x90>
	{
		switch(Copy_u8PortNo)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	e1 f0       	breq	.+56     	; 0x1560 <MDIO_ReadPort+0x68>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <MDIO_ReadPort+0x44>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f0       	breq	.+24     	; 0x1552 <MDIO_ReadPort+0x5a>
    153a:	26 c0       	rjmp	.+76     	; 0x1588 <MDIO_ReadPort+0x90>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	a1 f0       	breq	.+40     	; 0x156e <MDIO_ReadPort+0x76>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	b1 f0       	breq	.+44     	; 0x157c <MDIO_ReadPort+0x84>
    1550:	1b c0       	rjmp	.+54     	; 0x1588 <MDIO_ReadPort+0x90>
		{
		case MDIO_PORTA:
			*P_u8PortReading = PINA;
    1552:	e9 e3       	ldi	r30, 0x39	; 57
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	ea 81       	ldd	r30, Y+2	; 0x02
    155a:	fb 81       	ldd	r31, Y+3	; 0x03
    155c:	80 83       	st	Z, r24
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTB:
			*P_u8PortReading = PINB;
    1560:	e6 e3       	ldi	r30, 0x36	; 54
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	80 83       	st	Z, r24
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTC:
			*P_u8PortReading = PINC;
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	ea 81       	ldd	r30, Y+2	; 0x02
    1576:	fb 81       	ldd	r31, Y+3	; 0x03
    1578:	80 83       	st	Z, r24
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTD:
			*P_u8PortReading = PIND;
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	ea 81       	ldd	r30, Y+2	; 0x02
    1584:	fb 81       	ldd	r31, Y+3	; 0x03
    1586:	80 83       	st	Z, r24
	}
	else
	{
		/*NULL pointer*/
	}
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <MDIO_ReadPin>:
void MDIO_ReadPin(u8 Copy_u8PinNo, u8 Copy_u8PortNo, u8* P_u8PortReading)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <MDIO_ReadPin+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <MDIO_ReadPin+0x8>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <MDIO_ReadPin+0xa>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
    15aa:	5c 83       	std	Y+4, r21	; 0x04
    15ac:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	88 30       	cpi	r24, 0x08	; 8
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <MDIO_ReadPin+0x1e>
    15b4:	70 c0       	rjmp	.+224    	; 0x1696 <MDIO_ReadPin+0xfe>
	{
		switch (Copy_u8PortNo)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3e 83       	std	Y+6, r19	; 0x06
    15be:	2d 83       	std	Y+5, r18	; 0x05
    15c0:	4d 81       	ldd	r20, Y+5	; 0x05
    15c2:	5e 81       	ldd	r21, Y+6	; 0x06
    15c4:	41 30       	cpi	r20, 0x01	; 1
    15c6:	51 05       	cpc	r21, r1
    15c8:	59 f1       	breq	.+86     	; 0x1620 <MDIO_ReadPin+0x88>
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	34 f4       	brge	.+12     	; 0x15e0 <MDIO_ReadPin+0x48>
    15d4:	2d 81       	ldd	r18, Y+5	; 0x05
    15d6:	3e 81       	ldd	r19, Y+6	; 0x06
    15d8:	21 15       	cp	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <MDIO_ReadPin+0x60>
    15de:	5b c0       	rjmp	.+182    	; 0x1696 <MDIO_ReadPin+0xfe>
    15e0:	4d 81       	ldd	r20, Y+5	; 0x05
    15e2:	5e 81       	ldd	r21, Y+6	; 0x06
    15e4:	42 30       	cpi	r20, 0x02	; 2
    15e6:	51 05       	cpc	r21, r1
    15e8:	79 f1       	breq	.+94     	; 0x1648 <MDIO_ReadPin+0xb0>
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <MDIO_ReadPin+0x5e>
    15f4:	3d c0       	rjmp	.+122    	; 0x1670 <MDIO_ReadPin+0xd8>
    15f6:	4f c0       	rjmp	.+158    	; 0x1696 <MDIO_ReadPin+0xfe>
		{
		case MDIO_PORTA:
			* P_u8PortReading = GET_BIT(PINA,Copy_u8PinNo);
    15f8:	e9 e3       	ldi	r30, 0x39	; 57
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MDIO_ReadPin+0x78>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MDIO_ReadPin+0x74>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 83       	st	Z, r24
    161e:	3b c0       	rjmp	.+118    	; 0x1696 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTB:
			* P_u8PortReading = GET_BIT(PINB,Copy_u8PinNo);
    1620:	e6 e3       	ldi	r30, 0x36	; 54
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a9 01       	movw	r20, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <MDIO_ReadPin+0xa0>
    1634:	55 95       	asr	r21
    1636:	47 95       	ror	r20
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <MDIO_ReadPin+0x9c>
    163c:	ca 01       	movw	r24, r20
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	80 83       	st	Z, r24
    1646:	27 c0       	rjmp	.+78     	; 0x1696 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTC:
			* P_u8PortReading = GET_BIT(PINC,Copy_u8PinNo);
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a9 01       	movw	r20, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <MDIO_ReadPin+0xc8>
    165c:	55 95       	asr	r21
    165e:	47 95       	ror	r20
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <MDIO_ReadPin+0xc4>
    1664:	ca 01       	movw	r24, r20
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	eb 81       	ldd	r30, Y+3	; 0x03
    166a:	fc 81       	ldd	r31, Y+4	; 0x04
    166c:	80 83       	st	Z, r24
    166e:	13 c0       	rjmp	.+38     	; 0x1696 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTD:
			* P_u8PortReading = GET_BIT(PIND,Copy_u8PinNo);
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MDIO_ReadPin+0xf0>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <MDIO_ReadPin+0xec>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	eb 81       	ldd	r30, Y+3	; 0x03
    1692:	fc 81       	ldd	r31, Y+4	; 0x04
    1694:	80 83       	st	Z, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    1696:	26 96       	adiw	r28, 0x06	; 6
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <MDIO_TogglePin>:
void MDIO_TogglePin(u8 Copy_u8PinNo, u8 Copy_u8PortNo)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <MDIO_TogglePin+0x6>
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <MDIO_TogglePin+0x8>
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	88 30       	cpi	r24, 0x08	; 8
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <MDIO_TogglePin+0x18>
    16be:	6e c0       	rjmp	.+220    	; 0x179c <MDIO_TogglePin+0xf4>
	{
		switch (Copy_u8PortNo)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3c 83       	std	Y+4, r19	; 0x04
    16c8:	2b 83       	std	Y+3, r18	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	49 f1       	breq	.+82     	; 0x1726 <MDIO_TogglePin+0x7e>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <MDIO_TogglePin+0x40>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <MDIO_TogglePin+0x56>
    16e6:	5a c0       	rjmp	.+180    	; 0x179c <MDIO_TogglePin+0xf4>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	71 f1       	breq	.+92     	; 0x174e <MDIO_TogglePin+0xa6>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	e9 f1       	breq	.+122    	; 0x1776 <MDIO_TogglePin+0xce>
    16fc:	4f c0       	rjmp	.+158    	; 0x179c <MDIO_TogglePin+0xf4>
		{
		case MDIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8PinNo);
    16fe:	ab e3       	ldi	r26, 0x3B	; 59
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <MDIO_TogglePin+0x74>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <MDIO_TogglePin+0x70>
    1720:	84 27       	eor	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	3b c0       	rjmp	.+118    	; 0x179c <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8PinNo);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <MDIO_TogglePin+0x9c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <MDIO_TogglePin+0x98>
    1748:	84 27       	eor	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	27 c0       	rjmp	.+78     	; 0x179c <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8PinNo);
    174e:	a5 e3       	ldi	r26, 0x35	; 53
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <MDIO_TogglePin+0xc4>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <MDIO_TogglePin+0xc0>
    1770:	84 27       	eor	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	13 c0       	rjmp	.+38     	; 0x179c <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8PinNo);
    1776:	a2 e3       	ldi	r26, 0x32	; 50
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e2 e3       	ldi	r30, 0x32	; 50
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <MDIO_TogglePin+0xec>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <MDIO_TogglePin+0xe8>
    1798:	84 27       	eor	r24, r20
    179a:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong Pin number*/
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <MDIO_SetNibbleValue>:
void MDIO_SetNibbleValue(u8 Copy_u8PinStart, u8 Copy_u8PortNumber, u8 Copy_u8Value)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <MDIO_SetNibbleValue+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <MDIO_SetNibbleValue+0x8>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <MDIO_SetNibbleValue+0xa>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	6b 83       	std	Y+3, r22	; 0x03
    17bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Value = 0;
    17be:	19 82       	std	Y+1, r1	; 0x01
	Loc_u8Value = Copy_u8Value;
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	89 83       	std	Y+1, r24	; 0x01

	// Handling of the Value
	Loc_u8Value = ((Loc_u8Value & (0x0F)) << Copy_u8PinStart);
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 01       	movw	r18, r24
    17cc:	2f 70       	andi	r18, 0x0F	; 15
    17ce:	30 70       	andi	r19, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <MDIO_SetNibbleValue+0x34>
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <MDIO_SetNibbleValue+0x30>
    17e2:	ca 01       	movw	r24, r20
    17e4:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinStart<=4) && (Copy_u8PinStart>=0))
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	85 30       	cpi	r24, 0x05	; 5
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <MDIO_SetNibbleValue+0x44>
    17ec:	95 c0       	rjmp	.+298    	; 0x1918 <MDIO_SetNibbleValue+0x16e>
	{
		switch (Copy_u8PortNumber)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3e 83       	std	Y+6, r19	; 0x06
    17f6:	2d 83       	std	Y+5, r18	; 0x05
    17f8:	4d 81       	ldd	r20, Y+5	; 0x05
    17fa:	5e 81       	ldd	r21, Y+6	; 0x06
    17fc:	41 30       	cpi	r20, 0x01	; 1
    17fe:	51 05       	cpc	r21, r1
    1800:	a9 f1       	breq	.+106    	; 0x186c <MDIO_SetNibbleValue+0xc2>
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	91 05       	cpc	r25, r1
    180a:	34 f4       	brge	.+12     	; 0x1818 <MDIO_SetNibbleValue+0x6e>
    180c:	2d 81       	ldd	r18, Y+5	; 0x05
    180e:	3e 81       	ldd	r19, Y+6	; 0x06
    1810:	21 15       	cp	r18, r1
    1812:	31 05       	cpc	r19, r1
    1814:	71 f0       	breq	.+28     	; 0x1832 <MDIO_SetNibbleValue+0x88>
    1816:	80 c0       	rjmp	.+256    	; 0x1918 <MDIO_SetNibbleValue+0x16e>
    1818:	4d 81       	ldd	r20, Y+5	; 0x05
    181a:	5e 81       	ldd	r21, Y+6	; 0x06
    181c:	42 30       	cpi	r20, 0x02	; 2
    181e:	51 05       	cpc	r21, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <MDIO_SetNibbleValue+0x7a>
    1822:	41 c0       	rjmp	.+130    	; 0x18a6 <MDIO_SetNibbleValue+0xfc>
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	91 05       	cpc	r25, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <MDIO_SetNibbleValue+0x86>
    182e:	58 c0       	rjmp	.+176    	; 0x18e0 <MDIO_SetNibbleValue+0x136>
    1830:	73 c0       	rjmp	.+230    	; 0x1918 <MDIO_SetNibbleValue+0x16e>
		{
		case MDIO_PORTA :
			// Mask Port A
			PORTA &= (~((0X0F)<<Copy_u8PinStart));
    1832:	ab e3       	ldi	r26, 0x3B	; 59
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e3       	ldi	r30, 0x3B	; 59
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8f e0       	ldi	r24, 0x0F	; 15
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <MDIO_SetNibbleValue+0xa6>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <MDIO_SetNibbleValue+0xa2>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
			PORTA |= Loc_u8Value ;
    185a:	ab e3       	ldi	r26, 0x3B	; 59
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	90 81       	ld	r25, Z
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	89 2b       	or	r24, r25
    1868:	8c 93       	st	X, r24
    186a:	56 c0       	rjmp	.+172    	; 0x1918 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTB :
			// Mask Port B
			PORTB &= (~((0X0F)<<Copy_u8PinStart));
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8f e0       	ldi	r24, 0x0F	; 15
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <MDIO_SetNibbleValue+0xe0>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <MDIO_SetNibbleValue+0xdc>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
			PORTB |= Loc_u8Value ;
    1894:	a8 e3       	ldi	r26, 0x38	; 56
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e8 e3       	ldi	r30, 0x38	; 56
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	90 81       	ld	r25, Z
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	89 2b       	or	r24, r25
    18a2:	8c 93       	st	X, r24
    18a4:	39 c0       	rjmp	.+114    	; 0x1918 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTC :
			// Mask Port C
			PORTC &= (~((0X0F)<<Copy_u8PinStart));
    18a6:	a5 e3       	ldi	r26, 0x35	; 53
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <MDIO_SetNibbleValue+0x11a>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <MDIO_SetNibbleValue+0x116>
    18c8:	80 95       	com	r24
    18ca:	84 23       	and	r24, r20
    18cc:	8c 93       	st	X, r24
			PORTC |= Loc_u8Value ;
    18ce:	a5 e3       	ldi	r26, 0x35	; 53
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e5 e3       	ldi	r30, 0x35	; 53
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	90 81       	ld	r25, Z
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	89 2b       	or	r24, r25
    18dc:	8c 93       	st	X, r24
    18de:	1c c0       	rjmp	.+56     	; 0x1918 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTD :
			// Mask Port D
			PORTD &= (~((0X0F)<<Copy_u8PinStart));
    18e0:	a2 e3       	ldi	r26, 0x32	; 50
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e2 e3       	ldi	r30, 0x32	; 50
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8f e0       	ldi	r24, 0x0F	; 15
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <MDIO_SetNibbleValue+0x154>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <MDIO_SetNibbleValue+0x150>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
			PORTD |= Loc_u8Value ;
    1908:	a2 e3       	ldi	r26, 0x32	; 50
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e2 e3       	ldi	r30, 0x32	; 50
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	90 81       	ld	r25, Z
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	89 2b       	or	r24, r25
    1916:	8c 93       	st	X, r24
	}
	else
	{
		//wrong pin start
	}
}
    1918:	26 96       	adiw	r28, 0x06	; 6
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <MADC_Init>:
 * 3- Poll on ADIF
 * 4- Return ADC value
 * */

void MADC_Init(void)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	//Set Vreference
#if MADC_SET_VREF == VREF_AREF_PIN
	CLR_BIT(ADMUX,6);
	CLR_BIT(ADMUX,7);
#elif MADC_SET_VREF == VREF_AVCC_PIN
	SET_BIT(ADMUX,6);
    1932:	a7 e2       	ldi	r26, 0x27	; 39
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e2       	ldi	r30, 0x27	; 39
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 64       	ori	r24, 0x40	; 64
    193e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1940:	a7 e2       	ldi	r26, 0x27	; 39
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e7 e2       	ldi	r30, 0x27	; 39
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 77       	andi	r24, 0x7F	; 127
    194c:	8c 93       	st	X, r24
#elif MADC_SET_RESCALER == PRESCALER_DIVIDER_BY_8
	SET_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	CLR_BIT(ADCSRA,2);
#elif MADC_SET_RESCALER == PRESCALER_DIVIDER_BY_16
	CLR_BIT(ADCSRA,0);
    194e:	a6 e2       	ldi	r26, 0x26	; 38
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e6 e2       	ldi	r30, 0x26	; 38
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,1);
    195c:	a6 e2       	ldi	r26, 0x26	; 38
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e6 e2       	ldi	r30, 0x26	; 38
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8d 7f       	andi	r24, 0xFD	; 253
    1968:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    196a:	a6 e2       	ldi	r26, 0x26	; 38
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e6 e2       	ldi	r30, 0x26	; 38
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	84 60       	ori	r24, 0x04	; 4
    1976:	8c 93       	st	X, r24
#else
#error "wrong prescaler chosen"
#endif
	// Left/right adjust
#if MDCA_SET_ADJUST_LEVEL == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1978:	a7 e2       	ldi	r26, 0x27	; 39
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e7 e2       	ldi	r30, 0x27	; 39
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8f 7d       	andi	r24, 0xDF	; 223
    1984:	8c 93       	st	X, r24
#elif MDCA_SET_ADJUST_LEVEL == MADC_LEFT_ADJUST
	SET_BIT(ADMUS,5);
#endif

}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <MADC_StartConversion>:

u16 MADC_StartConversion(u8 Copy_u8ADC_Channel)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <MADC_StartConversion+0x6>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	8a 83       	std	Y+2, r24	; 0x02
	// Set Channel
	u8 Loc_u8ADC_Channel = Copy_u8ADC_Channel & MADC_CHANNEL_INPUT_MUSK ;
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	8f 71       	andi	r24, 0x1F	; 31
    199c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= MADC_ADMUX_REG_MUSK ;
    199e:	a7 e2       	ldi	r26, 0x27	; 39
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e7 e2       	ldi	r30, 0x27	; 39
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 7e       	andi	r24, 0xE0	; 224
    19aa:	8c 93       	st	X, r24
	ADMUX |= Loc_u8ADC_Channel ;
    19ac:	a7 e2       	ldi	r26, 0x27	; 39
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e7 e2       	ldi	r30, 0x27	; 39
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	90 81       	ld	r25, Z
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	89 2b       	or	r24, r25
    19ba:	8c 93       	st	X, r24
	// Start Conversion
	SET_BIT(ADCSRA,6);
    19bc:	a6 e2       	ldi	r26, 0x26	; 38
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 e2       	ldi	r30, 0x26	; 38
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 64       	ori	r24, 0x40	; 64
    19c8:	8c 93       	st	X, r24
	//Poll on the flag
	while (GET_BIT(ADCSRA,4)==0)
    19ca:	e6 e2       	ldi	r30, 0x26	; 38
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	82 95       	swap	r24
    19d2:	8f 70       	andi	r24, 0x0F	; 15
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	81 70       	andi	r24, 0x01	; 1
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	a9 f3       	breq	.-22     	; 0x19ca <MADC_StartConversion+0x3e>
	{
		//Convesrion processing
	}
	// Conversion finished
	return ADC;
    19e0:	e4 e2       	ldi	r30, 0x24	; 36
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <HCLCD_WriteCommand4Bit>:
#include "HCLCD_Interface.h"
#include <util/delay.h>
#include "HCLCD_Confag.h"
#include "HCLCD_Private.h"
void HCLCD_WriteCommand4Bit(u8 Copy_u8Comman)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	6d 97       	sbiw	r28, 0x1d	; 29
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT, PIN_LOW);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	// Set RS to Zero ==> to indicate a command
	MDIO_SetPinValue(RS,CONTROL_PORT, PIN_LOW);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	//Set High Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Comman>>4 );
    1a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a1e:	98 2f       	mov	r25, r24
    1a20:	92 95       	swap	r25
    1a22:	9f 70       	andi	r25, 0x0F	; 15
    1a24:	84 e0       	ldi	r24, 0x04	; 4
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	49 2f       	mov	r20, r25
    1a2a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e4       	ldi	r27, 0x40	; 64
    1a40:	89 8f       	std	Y+25, r24	; 0x19
    1a42:	9a 8f       	std	Y+26, r25	; 0x1a
    1a44:	ab 8f       	std	Y+27, r26	; 0x1b
    1a46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	55 e4       	ldi	r21, 0x45	; 69
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8d 8b       	std	Y+21, r24	; 0x15
    1a62:	9e 8b       	std	Y+22, r25	; 0x16
    1a64:	af 8b       	std	Y+23, r26	; 0x17
    1a66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <HCLCD_WriteCommand4Bit+0x98>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <HCLCD_WriteCommand4Bit+0x116>
	else if (__tmp > 65535)
    1a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <HCLCD_WriteCommand4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9c 8b       	std	Y+20, r25	; 0x14
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <HCLCD_WriteCommand4Bit+0xf8>
    1acc:	80 e9       	ldi	r24, 0x90	; 144
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad4:	89 89       	ldd	r24, Y+17	; 0x11
    1ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <HCLCD_WriteCommand4Bit+0xe6>
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <HCLCD_WriteCommand4Bit+0xda>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <HCLCD_WriteCommand4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6d 89       	ldd	r22, Y+21	; 0x15
    1af6:	7e 89       	ldd	r23, Y+22	; 0x16
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	98 89       	ldd	r25, Y+16	; 0x10
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <HCLCD_WriteCommand4Bit+0x122>
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	//Set low Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Comman );
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1b2c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e4       	ldi	r27, 0x40	; 64
    1b42:	8b 87       	std	Y+11, r24	; 0x0b
    1b44:	9c 87       	std	Y+12, r25	; 0x0c
    1b46:	ad 87       	std	Y+13, r26	; 0x0d
    1b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a e7       	ldi	r20, 0x7A	; 122
    1b58:	55 e4       	ldi	r21, 0x45	; 69
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	a9 87       	std	Y+9, r26	; 0x09
    1b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <HCLCD_WriteCommand4Bit+0x19a>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <HCLCD_WriteCommand4Bit+0x218>
	else if (__tmp > 65535)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <HCLCD_WriteCommand4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <HCLCD_WriteCommand4Bit+0x1fa>
    1bce:	80 e9       	ldi	r24, 0x90	; 144
    1bd0:	91 e0       	ldi	r25, 0x01	; 1
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <HCLCD_WriteCommand4Bit+0x1e8>
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <HCLCD_WriteCommand4Bit+0x1dc>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <HCLCD_WriteCommand4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <HCLCD_WriteCommand4Bit+0x224>
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
}
    1c28:	6d 96       	adiw	r28, 0x1d	; 29
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <HCLCD_Init4Bit>:

void HCLCD_Init4Bit()
{
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	c5 55       	subi	r28, 0x55	; 85
    1c48:	d0 40       	sbci	r29, 0x00	; 0
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	fe 01       	movw	r30, r28
    1c56:	ef 5a       	subi	r30, 0xAF	; 175
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	ac e0       	ldi	r26, 0x0C	; 12
    1c60:	b2 e4       	ldi	r27, 0x42	; 66
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	03 5b       	subi	r16, 0xB3	; 179
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	ef 5a       	subi	r30, 0xAF	; 175
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	55 e4       	ldi	r21, 0x45	; 69
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e3 5b       	subi	r30, 0xB3	; 179
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	44 f4       	brge	.+16     	; 0x1cc6 <HCLCD_Init4Bit+0x8c>
		__ticks = 1;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 5b       	subi	r30, 0xB5	; 181
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	64 c0       	rjmp	.+200    	; 0x1d8e <HCLCD_Init4Bit+0x154>
	else if (__tmp > 65535)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 5b       	subi	r30, 0xB3	; 179
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <HCLCD_Init4Bit+0xac>
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <HCLCD_Init4Bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ef 5a       	subi	r30, 0xAF	; 175
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8e 01       	movw	r16, r28
    1d06:	05 5b       	subi	r16, 0xB5	; 181
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	f8 01       	movw	r30, r16
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
    1d1c:	1f c0       	rjmp	.+62     	; 0x1d5c <HCLCD_Init4Bit+0x122>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 5b       	subi	r30, 0xB7	; 183
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e7 5b       	subi	r30, 0xB7	; 183
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <HCLCD_Init4Bit+0xfc>
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e7 5b       	subi	r30, 0xB7	; 183
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	de 01       	movw	r26, r28
    1d46:	a5 5b       	subi	r26, 0xB5	; 181
    1d48:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e5 5b       	subi	r30, 0xB5	; 181
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	11 96       	adiw	r26, 0x01	; 1
    1d58:	9c 93       	st	X, r25
    1d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e5 5b       	subi	r30, 0xB5	; 181
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	d1 f6       	brne	.-76     	; 0x1d1e <HCLCD_Init4Bit+0xe4>
    1d6a:	28 c0       	rjmp	.+80     	; 0x1dbc <HCLCD_Init4Bit+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	05 5b       	subi	r16, 0xB5	; 181
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e3 5b       	subi	r30, 0xB3	; 179
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	de 01       	movw	r26, r28
    1d90:	a9 5b       	subi	r26, 0xB9	; 185
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e5 5b       	subi	r30, 0xB5	; 181
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	9c 93       	st	X, r25
    1da2:	8e 93       	st	-X, r24
    1da4:	fe 01       	movw	r30, r28
    1da6:	e9 5b       	subi	r30, 0xB9	; 185
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <HCLCD_Init4Bit+0x174>
    1db2:	fe 01       	movw	r30, r28
    1db4:	e9 5b       	subi	r30, 0xB9	; 185
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
	_delay_ms(35);
	u8 Loc_u8Counter=0;
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	eb 5a       	subi	r30, 0xAB	; 171
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	10 82       	st	Z, r1
	// Set Direction of the used pins
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	eb 5a       	subi	r30, 0xAB	; 171
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	84 e0       	ldi	r24, 0x04	; 4
    1dcc:	80 83       	st	Z, r24
    1dce:	11 c0       	rjmp	.+34     	; 0x1df2 <HCLCD_Init4Bit+0x1b8>
	{
		MDIO_SetPinDirection(Loc_u8Counter, DATA_PORT, PIN_OUTPUT);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	eb 5a       	subi	r30, 0xAB	; 171
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
void HCLCD_Init4Bit()
{
	_delay_ms(35);
	u8 Loc_u8Counter=0;
	// Set Direction of the used pins
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    1de0:	de 01       	movw	r26, r28
    1de2:	ab 5a       	subi	r26, 0xAB	; 171
    1de4:	bf 4f       	sbci	r27, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	eb 5a       	subi	r30, 0xAB	; 171
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	8c 93       	st	X, r24
    1df2:	fe 01       	movw	r30, r28
    1df4:	eb 5a       	subi	r30, 0xAB	; 171
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 30       	cpi	r24, 0x08	; 8
    1dfc:	48 f3       	brcs	.-46     	; 0x1dd0 <HCLCD_Init4Bit+0x196>
	{
		MDIO_SetPinDirection(Loc_u8Counter, DATA_PORT, PIN_OUTPUT);
	}
	// Set Direction of the Control pins
	MDIO_SetPinDirection(RS, CONTROL_PORT, PIN_OUTPUT);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(RW, CONTROL_PORT, PIN_OUTPUT);
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(E, CONTROL_PORT, PIN_OUTPUT);
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>


	MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, FUNCTION_SET_MODE >> 4);
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	42 e0       	ldi	r20, 0x02	; 2
    1e22:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <MDIO_SetNibbleValue>
	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 5b       	subi	r30, 0xBD	; 189
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e0       	ldi	r26, 0x00	; 0
    1e3c:	b0 e4       	ldi	r27, 0x40	; 64
    1e3e:	80 83       	st	Z, r24
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	a2 83       	std	Z+2, r26	; 0x02
    1e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	8e 01       	movw	r16, r28
    1e48:	01 5c       	subi	r16, 0xC1	; 193
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 5b       	subi	r30, 0xBD	; 189
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	55 e4       	ldi	r21, 0x45	; 69
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e74:	fe 01       	movw	r30, r28
    1e76:	ff 96       	adiw	r30, 0x3f	; 63
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <HCLCD_Init4Bit+0x260>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e af       	std	Y+62, r25	; 0x3e
    1e96:	8d af       	std	Y+61, r24	; 0x3d
    1e98:	46 c0       	rjmp	.+140    	; 0x1f26 <HCLCD_Init4Bit+0x2ec>
	else if (__tmp > 65535)
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ff 96       	adiw	r30, 0x3f	; 63
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	64 f5       	brge	.+88     	; 0x1f0e <HCLCD_Init4Bit+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 5b       	subi	r30, 0xBD	; 189
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e af       	std	Y+62, r25	; 0x3e
    1ee2:	8d af       	std	Y+61, r24	; 0x3d
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <HCLCD_Init4Bit+0x2ca>
    1ee6:	80 e9       	ldi	r24, 0x90	; 144
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	9c af       	std	Y+60, r25	; 0x3c
    1eec:	8b af       	std	Y+59, r24	; 0x3b
    1eee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ef0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <HCLCD_Init4Bit+0x2b8>
    1ef6:	9c af       	std	Y+60, r25	; 0x3c
    1ef8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1efc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9e af       	std	Y+62, r25	; 0x3e
    1f02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <HCLCD_Init4Bit+0x2ac>
    1f0c:	16 c0       	rjmp	.+44     	; 0x1f3a <HCLCD_Init4Bit+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ff 96       	adiw	r30, 0x3f	; 63
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e af       	std	Y+62, r25	; 0x3e
    1f24:	8d af       	std	Y+61, r24	; 0x3d
    1f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2a:	9a af       	std	Y+58, r25	; 0x3a
    1f2c:	89 af       	std	Y+57, r24	; 0x39
    1f2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <HCLCD_Init4Bit+0x2f8>
    1f36:	9a af       	std	Y+58, r25	; 0x3a
    1f38:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	8d ab       	std	Y+53, r24	; 0x35
    1f4e:	9e ab       	std	Y+54, r25	; 0x36
    1f50:	af ab       	std	Y+55, r26	; 0x37
    1f52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6d a9       	ldd	r22, Y+53	; 0x35
    1f56:	7e a9       	ldd	r23, Y+54	; 0x36
    1f58:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a e7       	ldi	r20, 0x7A	; 122
    1f62:	55 e4       	ldi	r21, 0x45	; 69
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	89 ab       	std	Y+49, r24	; 0x31
    1f6e:	9a ab       	std	Y+50, r25	; 0x32
    1f70:	ab ab       	std	Y+51, r26	; 0x33
    1f72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f74:	69 a9       	ldd	r22, Y+49	; 0x31
    1f76:	7a a9       	ldd	r23, Y+50	; 0x32
    1f78:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <HCLCD_Init4Bit+0x35c>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <HCLCD_Init4Bit+0x3da>
	else if (__tmp > 65535)
    1f96:	69 a9       	ldd	r22, Y+49	; 0x31
    1f98:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <HCLCD_Init4Bit+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	98 ab       	std	Y+48, r25	; 0x30
    1fd4:	8f a7       	std	Y+47, r24	; 0x2f
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <HCLCD_Init4Bit+0x3bc>
    1fd8:	80 e9       	ldi	r24, 0x90	; 144
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	9e a7       	std	Y+46, r25	; 0x2e
    1fde:	8d a7       	std	Y+45, r24	; 0x2d
    1fe0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <HCLCD_Init4Bit+0x3aa>
    1fe8:	9e a7       	std	Y+46, r25	; 0x2e
    1fea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fee:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	98 ab       	std	Y+48, r25	; 0x30
    1ff4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff8:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <HCLCD_Init4Bit+0x39e>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <HCLCD_Init4Bit+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	69 a9       	ldd	r22, Y+49	; 0x31
    2002:	7a a9       	ldd	r23, Y+50	; 0x32
    2004:	8b a9       	ldd	r24, Y+51	; 0x33
    2006:	9c a9       	ldd	r25, Y+52	; 0x34
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	98 ab       	std	Y+48, r25	; 0x30
    2012:	8f a7       	std	Y+47, r24	; 0x2f
    2014:	8f a5       	ldd	r24, Y+47	; 0x2f
    2016:	98 a9       	ldd	r25, Y+48	; 0x30
    2018:	9c a7       	std	Y+44, r25	; 0x2c
    201a:	8b a7       	std	Y+43, r24	; 0x2b
    201c:	8b a5       	ldd	r24, Y+43	; 0x2b
    201e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <HCLCD_Init4Bit+0x3e6>
    2024:	9c a7       	std	Y+44, r25	; 0x2c
    2026:	8b a7       	std	Y+43, r24	; 0x2b

	//Start of the initialization sequence
	// Send Function Set Command
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(FUNCTION_SET_MODE);
    2028:	88 e2       	ldi	r24, 0x28	; 40
    202a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	8f a3       	std	Y+39, r24	; 0x27
    2038:	98 a7       	std	Y+40, r25	; 0x28
    203a:	a9 a7       	std	Y+41, r26	; 0x29
    203c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6f a1       	ldd	r22, Y+39	; 0x27
    2040:	78 a5       	ldd	r23, Y+40	; 0x28
    2042:	89 a5       	ldd	r24, Y+41	; 0x29
    2044:	9a a5       	ldd	r25, Y+42	; 0x2a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	55 e4       	ldi	r21, 0x45	; 69
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8b a3       	std	Y+35, r24	; 0x23
    2058:	9c a3       	std	Y+36, r25	; 0x24
    205a:	ad a3       	std	Y+37, r26	; 0x25
    205c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    205e:	6b a1       	ldd	r22, Y+35	; 0x23
    2060:	7c a1       	ldd	r23, Y+36	; 0x24
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <HCLCD_Init4Bit+0x446>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <HCLCD_Init4Bit+0x4c4>
	else if (__tmp > 65535)
    2080:	6b a1       	ldd	r22, Y+35	; 0x23
    2082:	7c a1       	ldd	r23, Y+36	; 0x24
    2084:	8d a1       	ldd	r24, Y+37	; 0x25
    2086:	9e a1       	ldd	r25, Y+38	; 0x26
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <HCLCD_Init4Bit+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6f a1       	ldd	r22, Y+39	; 0x27
    209a:	78 a5       	ldd	r23, Y+40	; 0x28
    209c:	89 a5       	ldd	r24, Y+41	; 0x29
    209e:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9a a3       	std	Y+34, r25	; 0x22
    20be:	89 a3       	std	Y+33, r24	; 0x21
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <HCLCD_Init4Bit+0x4a6>
    20c2:	80 e9       	ldi	r24, 0x90	; 144
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	98 a3       	std	Y+32, r25	; 0x20
    20c8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20cc:	98 a1       	ldd	r25, Y+32	; 0x20
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <HCLCD_Init4Bit+0x494>
    20d2:	98 a3       	std	Y+32, r25	; 0x20
    20d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	89 a1       	ldd	r24, Y+33	; 0x21
    20d8:	9a a1       	ldd	r25, Y+34	; 0x22
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <HCLCD_Init4Bit+0x488>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <HCLCD_Init4Bit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6b a1       	ldd	r22, Y+35	; 0x23
    20ec:	7c a1       	ldd	r23, Y+36	; 0x24
    20ee:	8d a1       	ldd	r24, Y+37	; 0x25
    20f0:	9e a1       	ldd	r25, Y+38	; 0x26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9a a3       	std	Y+34, r25	; 0x22
    20fc:	89 a3       	std	Y+33, r24	; 0x21
    20fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2100:	9a a1       	ldd	r25, Y+34	; 0x22
    2102:	9e 8f       	std	Y+30, r25	; 0x1e
    2104:	8d 8f       	std	Y+29, r24	; 0x1d
    2106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2108:	9e 8d       	ldd	r25, Y+30	; 0x1e
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <HCLCD_Init4Bit+0x4d0>
    210e:	9e 8f       	std	Y+30, r25	; 0x1e
    2110:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set Function Display ON/OFF
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPLAY_COMMAND);
    2112:	8f e0       	ldi	r24, 0x0F	; 15
    2114:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8d 8b       	std	Y+21, r24	; 0x15
    2142:	9e 8b       	std	Y+22, r25	; 0x16
    2144:	af 8b       	std	Y+23, r26	; 0x17
    2146:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <HCLCD_Init4Bit+0x530>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <HCLCD_Init4Bit+0x5ae>
	else if (__tmp > 65535)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <HCLCD_Init4Bit+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <HCLCD_Init4Bit+0x590>
    21ac:	80 e9       	ldi	r24, 0x90	; 144
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <HCLCD_Init4Bit+0x57e>
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <HCLCD_Init4Bit+0x572>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <HCLCD_Init4Bit+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <HCLCD_Init4Bit+0x5ba>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
	// Set Function Display clear
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR);
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e4       	ldi	r27, 0x40	; 64
    220a:	8b 87       	std	Y+11, r24	; 0x0b
    220c:	9c 87       	std	Y+12, r25	; 0x0c
    220e:	ad 87       	std	Y+13, r26	; 0x0d
    2210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a e7       	ldi	r20, 0x7A	; 122
    2220:	55 e4       	ldi	r21, 0x45	; 69
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8f 83       	std	Y+7, r24	; 0x07
    222c:	98 87       	std	Y+8, r25	; 0x08
    222e:	a9 87       	std	Y+9, r26	; 0x09
    2230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <HCLCD_Init4Bit+0x61a>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <HCLCD_Init4Bit+0x698>
	else if (__tmp > 65535)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <HCLCD_Init4Bit+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <HCLCD_Init4Bit+0x67a>
    2296:	80 e9       	ldi	r24, 0x90	; 144
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <HCLCD_Init4Bit+0x668>
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <HCLCD_Init4Bit+0x65c>
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <HCLCD_Init4Bit+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <HCLCD_Init4Bit+0x6a4>
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
	// Entry mode
	_delay_ms(2);
	HCLCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    22e6:	86 e0       	ldi	r24, 0x06	; 6
    22e8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
}
    22ec:	cb 5a       	subi	r28, 0xAB	; 171
    22ee:	df 4f       	sbci	r29, 0xFF	; 255
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	08 95       	ret

00002304 <HCLCD_WritChar4Bit>:

void HCLCD_WritChar4Bit(u8 Copy_u8Data)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	6d 97       	sbiw	r28, 0x1d	; 29
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT, PIN_LOW);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	// Set RS to Zero ==> to indicate a command
	MDIO_SetPinValue(RS,CONTROL_PORT, PIN_HIGH);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	//Set High Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Data>>4 );
    232e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2330:	98 2f       	mov	r25, r24
    2332:	92 95       	swap	r25
    2334:	9f 70       	andi	r25, 0x0F	; 15
    2336:	84 e0       	ldi	r24, 0x04	; 4
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	49 2f       	mov	r20, r25
    233c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e4       	ldi	r27, 0x40	; 64
    2352:	89 8f       	std	Y+25, r24	; 0x19
    2354:	9a 8f       	std	Y+26, r25	; 0x1a
    2356:	ab 8f       	std	Y+27, r26	; 0x1b
    2358:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	69 8d       	ldd	r22, Y+25	; 0x19
    235c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8d 8b       	std	Y+21, r24	; 0x15
    2374:	9e 8b       	std	Y+22, r25	; 0x16
    2376:	af 8b       	std	Y+23, r26	; 0x17
    2378:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    237a:	6d 89       	ldd	r22, Y+21	; 0x15
    237c:	7e 89       	ldd	r23, Y+22	; 0x16
    237e:	8f 89       	ldd	r24, Y+23	; 0x17
    2380:	98 8d       	ldd	r25, Y+24	; 0x18
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <HCLCD_WritChar4Bit+0x98>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
    239a:	3f c0       	rjmp	.+126    	; 0x241a <HCLCD_WritChar4Bit+0x116>
	else if (__tmp > 65535)
    239c:	6d 89       	ldd	r22, Y+21	; 0x15
    239e:	7e 89       	ldd	r23, Y+22	; 0x16
    23a0:	8f 89       	ldd	r24, Y+23	; 0x17
    23a2:	98 8d       	ldd	r25, Y+24	; 0x18
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <HCLCD_WritChar4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	69 8d       	ldd	r22, Y+25	; 0x19
    23b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <HCLCD_WritChar4Bit+0xf8>
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	9a 8b       	std	Y+18, r25	; 0x12
    23e4:	89 8b       	std	Y+17, r24	; 0x11
    23e6:	89 89       	ldd	r24, Y+17	; 0x11
    23e8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <HCLCD_WritChar4Bit+0xe6>
    23ee:	9a 8b       	std	Y+18, r25	; 0x12
    23f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8b 89       	ldd	r24, Y+19	; 0x13
    23f4:	9c 89       	ldd	r25, Y+20	; 0x14
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8b 89       	ldd	r24, Y+19	; 0x13
    23fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <HCLCD_WritChar4Bit+0xda>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <HCLCD_WritChar4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6d 89       	ldd	r22, Y+21	; 0x15
    2408:	7e 89       	ldd	r23, Y+22	; 0x16
    240a:	8f 89       	ldd	r24, Y+23	; 0x17
    240c:	98 8d       	ldd	r25, Y+24	; 0x18
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	8b 89       	ldd	r24, Y+19	; 0x13
    241c:	9c 89       	ldd	r25, Y+20	; 0x14
    241e:	98 8b       	std	Y+16, r25	; 0x10
    2420:	8f 87       	std	Y+15, r24	; 0x0f
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	98 89       	ldd	r25, Y+16	; 0x10
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <HCLCD_WritChar4Bit+0x122>
    242a:	98 8b       	std	Y+16, r25	; 0x10
    242c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>

	//Set low Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Data );
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    243e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e4       	ldi	r27, 0x40	; 64
    2454:	8b 87       	std	Y+11, r24	; 0x0b
    2456:	9c 87       	std	Y+12, r25	; 0x0c
    2458:	ad 87       	std	Y+13, r26	; 0x0d
    245a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	55 e4       	ldi	r21, 0x45	; 69
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	98 87       	std	Y+8, r25	; 0x08
    2478:	a9 87       	std	Y+9, r26	; 0x09
    247a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <HCLCD_WritChar4Bit+0x19a>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	3f c0       	rjmp	.+126    	; 0x251c <HCLCD_WritChar4Bit+0x218>
	else if (__tmp > 65535)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <HCLCD_WritChar4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <HCLCD_WritChar4Bit+0x1fa>
    24e0:	80 e9       	ldi	r24, 0x90	; 144
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <HCLCD_WritChar4Bit+0x1e8>
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <HCLCD_WritChar4Bit+0x1dc>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <HCLCD_WritChar4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <HCLCD_WritChar4Bit+0x224>
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
}
    253a:	6d 96       	adiw	r28, 0x1d	; 29
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <HCLCD_SetCursorPosition4Bit>:


void HCLCD_SetCursorPosition4Bit(u8 LineNumber , u8 PositionNumber)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	00 d0       	rcall	.+0      	; 0x2552 <HCLCD_SetCursorPosition4Bit+0x6>
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	6a 83       	std	Y+2, r22	; 0x02
	if((LineNumber == HCLCD_LINE0)||(LineNumber == HCLCD_LINE1))
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 23       	and	r24, r24
    255e:	19 f0       	breq	.+6      	; 0x2566 <HCLCD_SetCursorPosition4Bit+0x1a>
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	79 f4       	brne	.+30     	; 0x2584 <HCLCD_SetCursorPosition4Bit+0x38>
	{
		if (PositionNumber<16)
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	80 31       	cpi	r24, 0x10	; 16
    256a:	60 f4       	brcc	.+24     	; 0x2584 <HCLCD_SetCursorPosition4Bit+0x38>
		{
			if(LineNumber==HCLCD_LINE0)
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	88 23       	and	r24, r24
    2570:	29 f4       	brne	.+10     	; 0x257c <HCLCD_SetCursorPosition4Bit+0x30>
			{
				// line 1
				HCLCD_WriteCommand4Bit(PositionNumber+HCLCD_LINE1_OFFSET);
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	80 58       	subi	r24, 0x80	; 128
    2576:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <HCLCD_SetCursorPosition4Bit+0x38>
			}
			else
			{
				HCLCD_WriteCommand4Bit(PositionNumber+HCLCD_LINE2_OFFSET);
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	80 54       	subi	r24, 0x40	; 64
    2580:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <HCLCD_WriteCommand4Bit>
	else
	{
		//wrong line chosen
	}

}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <HCLCD_String_Write>:

void HCLCD_String_Write (u8 *str)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <HCLCD_String_Write+0x6>
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	9b 83       	std	Y+3, r25	; 0x03
    259c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    259e:	19 82       	std	Y+1, r1	; 0x01
	for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    25a0:	19 82       	std	Y+1, r1	; 0x01
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <HCLCD_String_Write+0x32>
	{
		HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	fc 01       	movw	r30, r24
    25b0:	e2 0f       	add	r30, r18
    25b2:	f3 1f       	adc	r31, r19
    25b4:	80 81       	ld	r24, Z
    25b6:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
}

void HCLCD_String_Write (u8 *str)
{
	u8 Counter=0;
	for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	80 81       	ld	r24, Z
    25d2:	88 23       	and	r24, r24
    25d4:	39 f7       	brne	.-50     	; 0x25a4 <HCLCD_String_Write+0x16>
	{
		HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
	}
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <HCLCD_String_Write_Position>:

void HCLCD_String_Write_Position (u8 *str , u8 LineNumber , u8 PositionNumber)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <HCLCD_String_Write_Position+0x6>
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <HCLCD_String_Write_Position+0x8>
    25ea:	0f 92       	push	r0
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9b 83       	std	Y+3, r25	; 0x03
    25f2:	8a 83       	std	Y+2, r24	; 0x02
    25f4:	6c 83       	std	Y+4, r22	; 0x04
    25f6:	4d 83       	std	Y+5, r20	; 0x05
	HCLCD_SetCursorPosition4Bit( LineNumber ,  PositionNumber);
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	6d 81       	ldd	r22, Y+5	; 0x05
    25fc:	0e 94 a6 12 	call	0x254c	; 0x254c <HCLCD_SetCursorPosition4Bit>
	u8 Counter=0;
    2600:	19 82       	std	Y+1, r1	; 0x01
		for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    2602:	19 82       	std	Y+1, r1	; 0x01
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <HCLCD_String_Write_Position+0x40>
		{
			HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>

void HCLCD_String_Write_Position (u8 *str , u8 LineNumber , u8 PositionNumber)
{
	HCLCD_SetCursorPosition4Bit( LineNumber ,  PositionNumber);
	u8 Counter=0;
		for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	80 81       	ld	r24, Z
    2634:	88 23       	and	r24, r24
    2636:	39 f7       	brne	.-50     	; 0x2606 <HCLCD_String_Write_Position+0x24>
		{
			HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
		}

}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <HCLCD_WriteDigits4Bit>:

void HCLCD_WriteDigits4Bit(u8 Copy_u8Number)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <HCLCD_WriteDigits4Bit+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <HCLCD_WriteDigits4Bit+0x8>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	8c 83       	std	Y+4, r24	; 0x04
	u8 Copy_u8Digit = 0;
    2656:	1b 82       	std	Y+3, r1	; 0x03
	u8 Copy_u8Answer = 0;
    2658:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Module = 0;
    265a:	19 82       	std	Y+1, r1	; 0x01
    265c:	1e c0       	rjmp	.+60     	; 0x269a <HCLCD_WriteDigits4Bit+0x52>
	while(Copy_u8Number > 0)
	{
		Copy_u8Module = Copy_u8Number % 10;
    265e:	8c 81       	ldd	r24, Y+4	; 0x04
    2660:	9a e0       	ldi	r25, 0x0A	; 10
    2662:	69 2f       	mov	r22, r25
    2664:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodqi4>
    2668:	89 2f       	mov	r24, r25
    266a:	89 83       	std	Y+1, r24	; 0x01

		Copy_u8Answer = Copy_u8Answer * 10 + Copy_u8Module;
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 01       	movw	r18, r24
    2674:	22 0f       	add	r18, r18
    2676:	33 1f       	adc	r19, r19
    2678:	c9 01       	movw	r24, r18
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	82 0f       	add	r24, r18
    2684:	93 1f       	adc	r25, r19
    2686:	98 2f       	mov	r25, r24
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	89 0f       	add	r24, r25
    268c:	8a 83       	std	Y+2, r24	; 0x02

		Copy_u8Number = Copy_u8Number / 10;
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9a e0       	ldi	r25, 0x0A	; 10
    2692:	69 2f       	mov	r22, r25
    2694:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodqi4>
    2698:	8c 83       	std	Y+4, r24	; 0x04
void HCLCD_WriteDigits4Bit(u8 Copy_u8Number)
{
	u8 Copy_u8Digit = 0;
	u8 Copy_u8Answer = 0;
	u8 Copy_u8Module = 0;
	while(Copy_u8Number > 0)
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	88 23       	and	r24, r24
    269e:	f9 f6       	brne	.-66     	; 0x265e <HCLCD_WriteDigits4Bit+0x16>
    26a0:	10 c0       	rjmp	.+32     	; 0x26c2 <HCLCD_WriteDigits4Bit+0x7a>
		Copy_u8Number = Copy_u8Number / 10;
	}

	while(Copy_u8Number > 0)
	{
		Copy_u8Digit = Copy_u8Number % 10;
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	9a e0       	ldi	r25, 0x0A	; 10
    26a6:	69 2f       	mov	r22, r25
    26a8:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodqi4>
    26ac:	89 2f       	mov	r24, r25
    26ae:	8b 83       	std	Y+3, r24	; 0x03
		HCLCD_WritChar4Bit(Copy_u8Digit);
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		Copy_u8Number = Copy_u8Number / 10;
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	9a e0       	ldi	r25, 0x0A	; 10
    26ba:	69 2f       	mov	r22, r25
    26bc:	0e 94 c3 14 	call	0x2986	; 0x2986 <__udivmodqi4>
    26c0:	8c 83       	std	Y+4, r24	; 0x04
		Copy_u8Answer = Copy_u8Answer * 10 + Copy_u8Module;

		Copy_u8Number = Copy_u8Number / 10;
	}

	while(Copy_u8Number > 0)
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	88 23       	and	r24, r24
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <HCLCD_WriteDigits4Bit+0x5a>
	{
		Copy_u8Digit = Copy_u8Number % 10;
		HCLCD_WritChar4Bit(Copy_u8Digit);
		Copy_u8Number = Copy_u8Number / 10;
	}
}
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <TIMER1_VidInit>:
 * thus we have 50% duty cylce
 */


void TIMER1_VidInit(void)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	/*Set Fast pwm mode with top-->ICR1*/
	CLR_BIT(TCCR1A,0);
    26de:	af e4       	ldi	r26, 0x4F	; 79
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ef e4       	ldi	r30, 0x4F	; 79
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	8e 7f       	andi	r24, 0xFE	; 254
    26ea:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    26ec:	af e4       	ldi	r26, 0x4F	; 79
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ef e4       	ldi	r30, 0x4F	; 79
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	82 60       	ori	r24, 0x02	; 2
    26f8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    26fa:	ae e4       	ldi	r26, 0x4E	; 78
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ee e4       	ldi	r30, 0x4E	; 78
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	80 61       	ori	r24, 0x10	; 16
    2706:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2708:	ae e4       	ldi	r26, 0x4E	; 78
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 60       	ori	r24, 0x08	; 8
    2714:	8c 93       	st	X, r24

	/*Set non-inverting Fast pwm channel A*/
	SET_BIT(TCCR1A,7);
    2716:	af e4       	ldi	r26, 0x4F	; 79
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ef e4       	ldi	r30, 0x4F	; 79
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    2724:	af e4       	ldi	r26, 0x4F	; 79
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ef e4       	ldi	r30, 0x4F	; 79
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8f 7b       	andi	r24, 0xBF	; 191
    2730:	8c 93       	st	X, r24

	/*Set Prescaler-->>64 Prescaler*/
	SET_BIT(TCCR1B,0);
    2732:	ae e4       	ldi	r26, 0x4E	; 78
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ee e4       	ldi	r30, 0x4E	; 78
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	81 60       	ori	r24, 0x01	; 1
    273e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2740:	ae e4       	ldi	r26, 0x4E	; 78
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ee e4       	ldi	r30, 0x4E	; 78
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	82 60       	ori	r24, 0x02	; 2
    274c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    274e:	ae e4       	ldi	r26, 0x4E	; 78
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	ee e4       	ldi	r30, 0x4E	; 78
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	8b 7f       	andi	r24, 0xFB	; 251
    275a:	8c 93       	st	X, r24
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <TIMER1_SetTopValue>:

void TIMER1_SetTopValue(u16 Copy_u16TopValue)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <TIMER1_SetTopValue+0x6>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
    2770:	e6 e4       	ldi	r30, 0x46	; 70
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TIMER1_Set_OCR1A_Value>:

void TIMER1_Set_OCR1A_Value(u16 Copy_u16CTCValue)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <TIMER1_Set_OCR1A_Value+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16CTCValue;
    2794:	ea e4       	ldi	r30, 0x4A	; 74
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <main>:

int main(void)
{
    27aa:	ef 92       	push	r14
    27ac:	ff 92       	push	r15
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	a6 97       	sbiw	r28, 0x26	; 38
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
	u8 Copy_u8Counter=0;
    27c6:	1b 8a       	std	Y+19, r1	; 0x13
	u8 Ton=2500;
    27c8:	84 ec       	ldi	r24, 0xC4	; 196
    27ca:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Tpreiod=5000;
    27cc:	88 e8       	ldi	r24, 0x88	; 136
    27ce:	89 8b       	std	Y+17, r24	; 0x11
	float Duty_cycle ;
	float time ;
	/*Set Top value in ICR1*/
	TIMER1_SetTopValue(Tpreiod);
    27d0:	89 89       	ldd	r24, Y+17	; 0x11
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 b1 13 	call	0x2762	; 0x2762 <TIMER1_SetTopValue>

	/*Timer1 Initialization---> MODE(14)-->FAST PWM-->TOP -->ICR1 */
	TIMER1_VidInit();
    27da:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <TIMER1_VidInit>
	HCLCD_Init4Bit();
    27de:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <HCLCD_Init4Bit>
	MDIO_SetPinDirection(MOTOR1_A1,MDIO_PORTC,PIN_OUTPUT);
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	62 e0       	ldi	r22, 0x02	; 2
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MOTOR1_A2,MDIO_PORTC,PIN_OUTPUT);
    27ec:	84 e0       	ldi	r24, 0x04	; 4
    27ee:	62 e0       	ldi	r22, 0x02	; 2
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MOTOR1_EN,MDIO_PORTD,PIN_OUTPUT);
    27f6:	85 e0       	ldi	r24, 0x05	; 5
    27f8:	63 e0       	ldi	r22, 0x03	; 3
    27fa:	41 e0       	ldi	r20, 0x01	; 1
    27fc:	0e 94 49 08 	call	0x1092	; 0x1092 <MDIO_SetPinDirection>
	u8 freq[7] = "Freq =";
    2800:	ce 01       	movw	r24, r28
    2802:	44 96       	adiw	r24, 0x14	; 20
    2804:	9b a3       	std	Y+35, r25	; 0x23
    2806:	8a a3       	std	Y+34, r24	; 0x22
    2808:	a0 e6       	ldi	r26, 0x60	; 96
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	bd a3       	std	Y+37, r27	; 0x25
    280e:	ac a3       	std	Y+36, r26	; 0x24
    2810:	b7 e0       	ldi	r27, 0x07	; 7
    2812:	be a3       	std	Y+38, r27	; 0x26
    2814:	ec a1       	ldd	r30, Y+36	; 0x24
    2816:	fd a1       	ldd	r31, Y+37	; 0x25
    2818:	00 80       	ld	r0, Z
    281a:	8c a1       	ldd	r24, Y+36	; 0x24
    281c:	9d a1       	ldd	r25, Y+37	; 0x25
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	9d a3       	std	Y+37, r25	; 0x25
    2822:	8c a3       	std	Y+36, r24	; 0x24
    2824:	aa a1       	ldd	r26, Y+34	; 0x22
    2826:	bb a1       	ldd	r27, Y+35	; 0x23
    2828:	0c 92       	st	X, r0
    282a:	ea a1       	ldd	r30, Y+34	; 0x22
    282c:	fb a1       	ldd	r31, Y+35	; 0x23
    282e:	31 96       	adiw	r30, 0x01	; 1
    2830:	fb a3       	std	Y+35, r31	; 0x23
    2832:	ea a3       	std	Y+34, r30	; 0x22
    2834:	fe a1       	ldd	r31, Y+38	; 0x26
    2836:	f1 50       	subi	r31, 0x01	; 1
    2838:	fe a3       	std	Y+38, r31	; 0x26
    283a:	8e a1       	ldd	r24, Y+38	; 0x26
    283c:	88 23       	and	r24, r24
    283e:	51 f7       	brne	.-44     	; 0x2814 <main+0x6a>
	u8 Duty[7] = "D =";
    2840:	84 e4       	ldi	r24, 0x44	; 68
    2842:	90 e2       	ldi	r25, 0x20	; 32
    2844:	ad e3       	ldi	r26, 0x3D	; 61
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	8b 8f       	std	Y+27, r24	; 0x1b
    284a:	9c 8f       	std	Y+28, r25	; 0x1c
    284c:	ad 8f       	std	Y+29, r26	; 0x1d
    284e:	be 8f       	std	Y+30, r27	; 0x1e
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	fe 01       	movw	r30, r28
    2854:	7f 96       	adiw	r30, 0x1f	; 31
    2856:	df 01       	movw	r26, r30
    2858:	98 2f       	mov	r25, r24
    285a:	1d 92       	st	X+, r1
    285c:	9a 95       	dec	r25
    285e:	e9 f7       	brne	.-6      	; 0x285a <main+0xb0>

	while(1)
	{
		//Set Forward Direction
		MDIO_SetPinValue(MOTOR1_A1,MDIO_PORTC,PIN_HIGH);
    2860:	83 e0       	ldi	r24, 0x03	; 3
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
		MDIO_SetPinValue(MOTOR1_A2,MDIO_PORTC,PIN_LOW);
    286a:	84 e0       	ldi	r24, 0x04	; 4
    286c:	62 e0       	ldi	r22, 0x02	; 2
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_SetPinValue>
		TIMER1_Set_OCR1A_Value(Ton);// Ton
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 c3 13 	call	0x2786	; 0x2786 <TIMER1_Set_OCR1A_Value>
		float Duty_cycle = (float)Ton/Tpreiod;
    287e:	8a 89       	ldd	r24, Y+18	; 0x12
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 e0       	ldi	r26, 0x00	; 0
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2890:	7b 01       	movw	r14, r22
    2892:	8c 01       	movw	r16, r24
    2894:	89 89       	ldd	r24, Y+17	; 0x11
    2896:	88 2f       	mov	r24, r24
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	aa 27       	eor	r26, r26
    289c:	97 fd       	sbrc	r25, 7
    289e:	a0 95       	com	r26
    28a0:	ba 2f       	mov	r27, r26
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    28aa:	9b 01       	movw	r18, r22
    28ac:	ac 01       	movw	r20, r24
    28ae:	c8 01       	movw	r24, r16
    28b0:	b7 01       	movw	r22, r14
    28b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	af 83       	std	Y+7, r26	; 0x07
    28c0:	b8 87       	std	Y+8, r27	; 0x08
		float time = 1.0/Duty_cycle;
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e8       	ldi	r24, 0x80	; 128
    28c8:	9f e3       	ldi	r25, 0x3F	; 63
    28ca:	2d 81       	ldd	r18, Y+5	; 0x05
    28cc:	3e 81       	ldd	r19, Y+6	; 0x06
    28ce:	4f 81       	ldd	r20, Y+7	; 0x07
    28d0:	58 85       	ldd	r21, Y+8	; 0x08
    28d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	ab 83       	std	Y+3, r26	; 0x03
    28e0:	bc 83       	std	Y+4, r27	; 0x04
		/*
		 *  then duty cycle = Ton/Tperiod
		 *  = 50%
		 */
		HCLCD_String_Write(freq);
    28e2:	ce 01       	movw	r24, r28
    28e4:	44 96       	adiw	r24, 0x14	; 20
    28e6:	0e 94 c7 12 	call	0x258e	; 0x258e <HCLCD_String_Write>
		HCLCD_WritChar4Bit('5');
    28ea:	85 e3       	ldi	r24, 0x35	; 53
    28ec:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('0');
    28f0:	80 e3       	ldi	r24, 0x30	; 48
    28f2:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('h');
    28f6:	88 e6       	ldi	r24, 0x68	; 104
    28f8:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('z');
    28fc:	8a e7       	ldi	r24, 0x7A	; 122
    28fe:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('/');
    2902:	8f e2       	ldi	r24, 0x2F	; 47
    2904:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_String_Write(Duty);
    2908:	ce 01       	movw	r24, r28
    290a:	4b 96       	adiw	r24, 0x1b	; 27
    290c:	0e 94 c7 12 	call	0x258e	; 0x258e <HCLCD_String_Write>
		HCLCD_WritChar4Bit('5');
    2910:	85 e3       	ldi	r24, 0x35	; 53
    2912:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('0');
    2916:	80 e3       	ldi	r24, 0x30	; 48
    2918:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('%');
    291c:	85 e2       	ldi	r24, 0x25	; 37
    291e:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_SetCursorPosition4Bit(HCLCD_LINE1, 0);
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	0e 94 a6 12 	call	0x254c	; 0x254c <HCLCD_SetCursorPosition4Bit>
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    292a:	1b 8a       	std	Y+19, r1	; 0x13
    292c:	06 c0       	rjmp	.+12     	; 0x293a <main+0x190>
		{
			HCLCD_WritChar4Bit('-');
    292e:	8d e2       	ldi	r24, 0x2D	; 45
    2930:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_String_Write(Duty);
		HCLCD_WritChar4Bit('5');
		HCLCD_WritChar4Bit('0');
		HCLCD_WritChar4Bit('%');
		HCLCD_SetCursorPosition4Bit(HCLCD_LINE1, 0);
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	8b 89       	ldd	r24, Y+19	; 0x13
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	b8 f3       	brcs	.-18     	; 0x292e <main+0x184>
		{
			HCLCD_WritChar4Bit('-');
		}
		HCLCD_WritChar4Bit('|');
    2940:	8c e7       	ldi	r24, 0x7C	; 124
    2942:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    2946:	1b 8a       	std	Y+19, r1	; 0x13
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <main+0x1ac>
		{
			HCLCD_WritChar4Bit('_');
    294a:	8f e5       	ldi	r24, 0x5F	; 95
    294c:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
		{
			HCLCD_WritChar4Bit('-');
		}
		HCLCD_WritChar4Bit('|');
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	8b 8b       	std	Y+19, r24	; 0x13
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	b8 f3       	brcs	.-18     	; 0x294a <main+0x1a0>
		{
			HCLCD_WritChar4Bit('_');
		}
		HCLCD_WritChar4Bit('|');
    295c:	8c e7       	ldi	r24, 0x7C	; 124
    295e:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    2962:	1b 8a       	std	Y+19, r1	; 0x13
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <main+0x1c8>
		{
			HCLCD_WritChar4Bit('-');
    2966:	8d e2       	ldi	r24, 0x2D	; 45
    2968:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
		{
			HCLCD_WritChar4Bit('_');
		}
		HCLCD_WritChar4Bit('|');
		for(Copy_u8Counter=0;Copy_u8Counter<4;Copy_u8Counter++)
    296c:	8b 89       	ldd	r24, Y+19	; 0x13
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	84 30       	cpi	r24, 0x04	; 4
    2976:	b8 f3       	brcs	.-18     	; 0x2966 <main+0x1bc>
		{
			HCLCD_WritChar4Bit('-');
		}
		HCLCD_WritChar4Bit('|');
    2978:	8c e7       	ldi	r24, 0x7C	; 124
    297a:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
		HCLCD_WritChar4Bit('_');
    297e:	8f e5       	ldi	r24, 0x5F	; 95
    2980:	0e 94 82 11 	call	0x2304	; 0x2304 <HCLCD_WritChar4Bit>
    2984:	6d cf       	rjmp	.-294    	; 0x2860 <main+0xb6>

00002986 <__udivmodqi4>:
    2986:	99 1b       	sub	r25, r25
    2988:	79 e0       	ldi	r23, 0x09	; 9
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <__udivmodqi4_ep>

0000298c <__udivmodqi4_loop>:
    298c:	99 1f       	adc	r25, r25
    298e:	96 17       	cp	r25, r22
    2990:	08 f0       	brcs	.+2      	; 0x2994 <__udivmodqi4_ep>
    2992:	96 1b       	sub	r25, r22

00002994 <__udivmodqi4_ep>:
    2994:	88 1f       	adc	r24, r24
    2996:	7a 95       	dec	r23
    2998:	c9 f7       	brne	.-14     	; 0x298c <__udivmodqi4_loop>
    299a:	80 95       	com	r24
    299c:	08 95       	ret

0000299e <__prologue_saves__>:
    299e:	2f 92       	push	r2
    29a0:	3f 92       	push	r3
    29a2:	4f 92       	push	r4
    29a4:	5f 92       	push	r5
    29a6:	6f 92       	push	r6
    29a8:	7f 92       	push	r7
    29aa:	8f 92       	push	r8
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	ca 1b       	sub	r28, r26
    29c8:	db 0b       	sbc	r29, r27
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	09 94       	ijmp

000029d6 <__epilogue_restores__>:
    29d6:	2a 88       	ldd	r2, Y+18	; 0x12
    29d8:	39 88       	ldd	r3, Y+17	; 0x11
    29da:	48 88       	ldd	r4, Y+16	; 0x10
    29dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29de:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e8:	b9 84       	ldd	r11, Y+9	; 0x09
    29ea:	c8 84       	ldd	r12, Y+8	; 0x08
    29ec:	df 80       	ldd	r13, Y+7	; 0x07
    29ee:	ee 80       	ldd	r14, Y+6	; 0x06
    29f0:	fd 80       	ldd	r15, Y+5	; 0x05
    29f2:	0c 81       	ldd	r16, Y+4	; 0x04
    29f4:	1b 81       	ldd	r17, Y+3	; 0x03
    29f6:	aa 81       	ldd	r26, Y+2	; 0x02
    29f8:	b9 81       	ldd	r27, Y+1	; 0x01
    29fa:	ce 0f       	add	r28, r30
    29fc:	d1 1d       	adc	r29, r1
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	ed 01       	movw	r28, r26
    2a0a:	08 95       	ret

00002a0c <_exit>:
    2a0c:	f8 94       	cli

00002a0e <__stop_program>:
    2a0e:	ff cf       	rjmp	.-2      	; 0x2a0e <__stop_program>
